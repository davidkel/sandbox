---
# Logging section
logging:
 # Spec
 spec: debug
 # Format
 format: '%{color}%{time:2006-01-02 15:04:05.000 MST} [%{module}] %{shortfunc} -> %{level:.4s} %{id:03x}%{color:reset} %{message}'


# fsc section
fsc:
  # The FSC id provides a name for this node instance and is used when
  # naming docker resources.
  id: {{ fscnode.id }} # fsc.approver
  # The networkId allows for logical separation of networks and is used when
  # naming docker resources.
  networkId: {{ fscnode.networkid }} # b37w5d4fqjb47muizw4dmc7r4m
  # This represents the endpoint to other FSC nodes in the same organization.

  # DAVE: Need to understand these better

  address: {{ fscnode.grpcendpoint }} # 127.0.0.1:20000
  # Whether the FSC node should programmatically determine its address
  # This case is useful for docker containers.
  # When set to true, will override FSC address.
  addressAutoDetect: false # true
  # GRPC Server listener address
  listenAddress: {{ fscnode.grpcendpoint }} # 127.0.0.1:20000

  # what is this identity used for ? what is the meaning of an admin identity represented by a cert only ?

  # Identity of this node, used to connect to other nodes
  identity:
    # X.509 certificate used as identity of this node
    cert:
      file: /home/dave/github-cloned/fabric-smart-client/samples/fabric/iou/testdata/fsc/crypto/peerOrganizations/fsc.example.com/peers/approver.fsc.example.com/msp/signcerts/approver.fsc.example.com-cert.pem
    # Private key matching the X.509 certificate
    key:
      file: /home/dave/github-cloned/fabric-smart-client/samples/fabric/iou/testdata/fsc/crypto/peerOrganizations/fsc.example.com/peers/approver.fsc.example.com/msp/keystore/priv_sk
  # Admin X.509 certificates TODO: What is this used for ?
  admin:
    certs:
    - /home/dave/github-cloned/fabric-smart-client/samples/fabric/iou/testdata/fsc/crypto/peerOrganizations/fsc.example.com/users/Admin@fsc.example.com/msp/signcerts/Admin@fsc.example.com-cert.pem


  # TLS Settings for GRPC Server end point when if client auth is required when connecting to a GRPC endpoint
  # (We use here the same set of properties as Hyperledger Fabric)
  tls:
    # Require server-side TLS
    enabled:  true
    # Require client certificates / mutual TLS for inbound connections.
    # Note that clients that are not configured to use a certificate will
    # fail to connect to the node.
    clientAuthRequired: false
    # X.509 certificate used for TLS server
    cert:
      file: /home/dave/github-cloned/fabric-smart-client/samples/fabric/iou/testdata/fsc/crypto/peerOrganizations/fsc.example.com/peers/approver.fsc.example.com/tls/server.crt
    # Private key used for TLS server
    key:
      file: /home/dave/github-cloned/fabric-smart-client/samples/fabric/iou/testdata/fsc/crypto/peerOrganizations/fsc.example.com/peers/approver.fsc.example.com/tls/server.key
    # TODO: Don't understand why this is needed as fsc nodes don't make grpc client connections
    # rootcert.file represents the trusted root certificate chain used for verifying certificates
    # of other nodes during outbound connections.
    rootcert:
      file: /home/dave/github-cloned/fabric-smart-client/samples/fabric/iou/testdata/fsc/crypto/peerOrganizations/fsc.example.com/peers/approver.fsc.example.com/tls/ca.crt


    # X.509 certificate used for TLS when making client connections.
    # If not set, fsc.tls.cert.file will be used instead
    clientCert:
      file: /home/dave/github-cloned/fabric-smart-client/samples/fabric/iou/testdata/fsc/crypto/peerOrganizations/fsc.example.com/peers/approver.fsc.example.com/tls/server.crt
    # Private key used for TLS when making client connections.
    # If not set, fsc.tls.key.file will be used instead
    clientKey:
      file: /home/dave/github-cloned/fabric-smart-client/samples/fabric/iou/testdata/fsc/crypto/peerOrganizations/fsc.example.com/peers/approver.fsc.example.com/tls/server.key
    # If mutual TLS is enabled, clientRootCAs.files contains a list of additional root certificates
    # used for verifying certificates of client connections.
    # TODO: This is going to need the Root CAs of the clients that will interact with this node we assume that this will only be clients of the approver org in this case
    clientRootCAs:
      files:
      - /home/dave/github-cloned/fabric-smart-client/samples/fabric/iou/testdata/fsc/crypto/peerOrganizations/fsc.example.com/peers/approver.fsc.example.com/tls/ca.crt

    # TODO: What is this file used for ?
    rootCertFile: /home/dave/github-cloned/fabric-smart-client/samples/fabric/iou/testdata/fsc/crypto/ca-certs.pem


  # Keepalive settings for node server and clients
  keepalive:
    # MinInterval is the minimum permitted time between client pings.
    # If clients send pings more frequently, the peer server will
    # disconnect them
    minInterval: 60s
    # Interval is the duration after which if the server does not see
    # any activity from the client it pings the client to see if it's alive
    interval: 300s
    # Timeout is the duration the server waits for a response
    # from the client after sending a ping before closing the connection
    timeout: 600s


  # P2P configuration
  p2p:
    # Listening address
    listenAddress: {{ p2p.endpoint }} # ip4/127.0.0.1/tcp/20001
    # If empty, this is a P2P boostrap node. Otherwise, it contains the name of the FCS node that is a bootstrap node
    bootstrapNode: {{ p2p.boostrapNode }} # required if not the bootstrap node, format: name resolved by the endpoint section, eg bootstrapNode: approver. TODO: do we resolve by name or identity.id

  # The Key-Value Store is used to store various information related to the FSC node
  kvs:
    persistence:
      # Persistence type can be \'badger\' (on disk) or \'memory\'
      type: badger
      opts:
        path: /home/dave/github-cloned/fabric-smart-client/samples/fabric/iou/testdata/fsc/nodes/approver/kvs


  # HTML Server configuration for REST calls
  web:
    enabled: true
    # HTTPS server listener address
    address: 0.0.0.0:20002
    tls:
      enabled:  true
      cert:
        file: /home/dave/github-cloned/fabric-smart-client/samples/fabric/iou/testdata/fsc/crypto/peerOrganizations/fsc.example.com/peers/approver.fsc.example.com/tls/server.crt
      key:
        file: /home/dave/github-cloned/fabric-smart-client/samples/fabric/iou/testdata/fsc/crypto/peerOrganizations/fsc.example.com/peers/approver.fsc.example.com/tls/server.key

      # TODO: Why do we need this unless we want to use mutual tls ? is the presence of this defining that it is enabled ?
      clientRootCAs:
        files:
        - /home/dave/github-cloned/fabric-smart-client/samples/fabric/iou/testdata/fsc/crypto/peerOrganizations/fsc.example.com/peers/approver.fsc.example.com/tls/ca.crt
    rootCertFile: /home/dave/github-cloned/fabric-smart-client/samples/fabric/iou/testdata/fsc/crypto/ca-certs.pem


  # what does this mean ?
  tracing:
    provider: none
    udp:
      address: 127.0.0.1:8125

  # statsd or prometheus metrics assume prometheus is exposed via http and /metrics ? what other config options are there ?
  metrics:
    # metrics provider is one of statsd, prometheus, or disabled
    provider: prometheus
    # statsd configuration
    statsd:
      # network type: tcp or udp
      network: udp
      # statsd server address
      address: 127.0.0.1:8125
      # the interval at which locally cached counters and gauges are pushed
      # to statsd; timings are pushed immediately
      writeInterval: 10s
      # prefix is prepended to all emitted statsd metrics
      prefix:

  # The endpoint section tells how to reach other FSC node in the network.
  # For each node, the name, the domain, the identity of the node, and its addresses must be specified.
  endpoint:
    resolvers:
    # endpoint resolver not required for your own node, bootstrap node appears to need P2P definition is this resolver only used by P2P ?
    # Do we need the others defined because it's how p2p comms refer to other nodes ?
    - name: approver
      domain: fsc.example.com
      identity:
        id: approver
        path: /home/dave/github-cloned/fabric-smart-client/samples/fabric/iou/testdata/fsc/crypto/peerOrganizations/fsc.example.com/peers/approver.fsc.example.com/msp/signcerts/approver.fsc.example.com-cert.pem
      addresses:
         P2P: 127.0.0.1:20001

    - name: borrower
      domain: fsc.example.com
      identity:
        id: borrower
        path: /home/dave/github-cloned/fabric-smart-client/samples/fabric/iou/testdata/fsc/crypto/peerOrganizations/fsc.example.com/peers/borrower.fsc.example.com/msp/signcerts/borrower.fsc.example.com-cert.pem
      addresses:
      aliases:


    - name: lender
      domain: fsc.example.com
      identity:
        id: lender
        path: /home/dave/github-cloned/fabric-smart-client/samples/fabric/iou/testdata/fsc/crypto/peerOrganizations/fsc.example.com/peers/lender.fsc.example.com/msp/signcerts/lender.fsc.example.com-cert.pem
      addresses:
      aliases:


# fabric driver configuration
fabric:
  enabled: true

  # what is this default ?
  default:

    # what is this default ?
    default: true
    BCCSP:
      Default: SW
      SW:
        Hash: SHA2
        Security: 256
        FileKeyStore:
          KeyStore:

    # msp of the node (ie which org owns the node)
    # TODO: Why does this need access to the whole MSP ? If they are an endorser then I can see why, but not otherwise
    mspConfigPath: /home/dave/github-cloned/fabric-smart-client/samples/fabric/iou/testdata/fabric.default/crypto/peerOrganizations/org1.example.com/peers/approver.org1.example.com/msp
    localMspId: Org1MSP
    # mspCacheSize: 500 This looks to be redundent

    # TODO: what goes here ?
    msps:

    # tls requirements to communicate with the peer ? assume it uses only enabled and clientAuthRequired
    tls:
      enabled:  true
      clientAuthRequired: false

      # TODO: Normally you don't need tls certs and key to connect to a peer only the root cert to verify the peers tls credentials, so what are these used for if we have
      # another set of sections for mutual tls ? I don't think they are used
      cert:
        file: /home/dave/github-cloned/fabric-smart-client/samples/fabric/iou/testdata/fabric.default/crypto/peerOrganizations/org1.example.com/peers/approver.org1.example.com/tls/server.crt
      key:
        file: /home/dave/github-cloned/fabric-smart-client/samples/fabric/iou/testdata/fabric.default/crypto/peerOrganizations/org1.example.com/peers/approver.org1.example.com/tls/server.key


      # Seems we use fabric peers own tls identity as our client's identity
      clientCert:
        file: /home/dave/github-cloned/fabric-smart-client/samples/fabric/iou/testdata/fabric.default/crypto/peerOrganizations/org1.example.com/peers/approver.org1.example.com/tls/server.crt
      clientKey:
        file: /home/dave/github-cloned/fabric-smart-client/samples/fabric/iou/testdata/fabric.default/crypto/peerOrganizations/org1.example.com/peers/approver.org1.example.com/tls/server.key

      # TODO: I don't think this is used yet
      rootcert:
        file: /home/dave/github-cloned/fabric-smart-client/samples/fabric/iou/testdata/fabric.default/crypto/peerOrganizations/org1.example.com/peers/approver.org1.example.com/tls/ca.crt

      # Why does fabric-driver need this if it's not a grpc server using mutual tls ?
      clientRootCAs:
        files:
        - /home/dave/github-cloned/fabric-smart-client/samples/fabric/iou/testdata/fabric.default/crypto/peerOrganizations/org1.example.com/peers/approver.org1.example.com/tls/ca.crt

      # this is the root CAs for all of the fabric org for verification of a TLS connection, not sure where this is used vs the peers info but it is required
      rootCertFile: /home/dave/github-cloned/fabric-smart-client/samples/fabric/iou/testdata/fabric.default/crypto/ca-certs.pem # this is all the ca certs of the fabric org

      # standard grpc keepalive for who ? are we more than a client ?
      keepalive:
       client:
         interval: 60s
         timeout: 600s
       server:
         interval: 60s
         timeout: 600s
         minInterval: 60s

    # peer endpoints
    peers:
      - address: 127.0.0.1:20013
        connectionTimeout: 10s
        tlsEnabled: true
        tlsRootCertFile: /home/dave/github-cloned/fabric-smart-client/samples/fabric/iou/testdata/fabric.default/crypto/ca-certs.pem
        serverNameOverride:

    # defined channels
    channels:
      - name: testchannel
        default: true #TODO: What does this default mean ?
        chaincodes:
          - name: iou
            private: false #TODO: What does false mean ?

    # What is vault used for ?
    vault:
      persistence:
        type: file
        opts:
          path: /home/dave/github-cloned/fabric-smart-client/samples/fabric/iou/testdata/fsc/nodes/approver/fabric.default/vault

    # resolvers used by the fabric driver
    endpoint:
      resolvers:
      - name: Org1_peer_0
        domain: org1.example.com
        identity:
          id: Org1_peer_0
          mspType: bccsp
          mspID: Org1MSP
          path: /home/dave/github-cloned/fabric-smart-client/samples/fabric/iou/testdata/fabric.default/crypto/peerOrganizations/org1.example.com/peers/Org1_peer_0.org1.example.com/msp/signcerts/Org1_peer_0.org1.example.com-cert.pem
        addresses:
           Listen: 127.0.0.1:20013
        aliases:

      - name: Org2_peer_0
        domain: org2.example.com
        identity:
          id: Org2_peer_0
          mspType: bccsp
          mspID: Org2MSP
          path: /home/dave/github-cloned/fabric-smart-client/samples/fabric/iou/testdata/fabric.default/crypto/peerOrganizations/org2.example.com/peers/Org2_peer_0.org2.example.com/msp/signcerts/Org2_peer_0.org2.example.com-cert.pem
        addresses:
           Listen: 127.0.0.1:20020
        aliases:

      - name: Org3_peer_0
        domain: org3.example.com
        identity:
          id: Org3_peer_0
          mspType: bccsp
          mspID: Org3MSP
          path: /home/dave/github-cloned/fabric-smart-client/samples/fabric/iou/testdata/fabric.default/crypto/peerOrganizations/org3.example.com/peers/Org3_peer_0.org3.example.com/msp/signcerts/Org3_peer_0.org3.example.com-cert.pem
        addresses:
           Listen: 127.0.0.1:20027
        aliases:

      # TODO: Why does fabric-driver need to know about the identities of the fsc endpoints
      - name: approver
        domain: org1.example.com
        identity:
          id: approver
          mspType: bccsp
          mspID: Org1MSP
          path: /home/dave/github-cloned/fabric-smart-client/samples/fabric/iou/testdata/fabric.default/crypto/peerOrganizations/org1.example.com/peers/approver.org1.example.com/msp/signcerts/approver.org1.example.com-cert.pem
        addresses:
        aliases:

      - name: borrower
        domain: org2.example.com
        identity:
          id: borrower
          mspType: bccsp
          mspID: Org2MSP
          path: /home/dave/github-cloned/fabric-smart-client/samples/fabric/iou/testdata/fabric.default/crypto/peerOrganizations/org2.example.com/peers/borrower.org2.example.com/msp/signcerts/borrower.org2.example.com-cert.pem
        addresses:
        aliases:

      - name: lender
        domain: org3.example.com
        identity:
          id: lender
          mspType: bccsp
          mspID: Org3MSP
          path: /home/dave/github-cloned/fabric-smart-client/samples/fabric/iou/testdata/fabric.default/crypto/peerOrganizations/org3.example.com/peers/lender.org3.example.com/msp/signcerts/lender.org3.example.com-cert.pem
        addresses:
        aliases:

